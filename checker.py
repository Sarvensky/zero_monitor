"""
–ú–æ–¥—É–ª—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ç–∏ ZeroTier.
"""

import platform
import subprocess
import settings
import database_manager as db
from utils import get_seconds_since


def ping_host(ip_address: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ –ø–æ IP-–∞–¥—Ä–µ—Å—É —Å –ø–æ–º–æ—â—å—é –æ–¥–Ω–æ–π ICMP-–∑–∞—è–≤–∫–∏ (ping).
    –°–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã ping.

    Args:
        ip_address: IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.

    Returns:
        True, –µ—Å–ª–∏ —Ö–æ—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–∏–Ω–≥, –∏–Ω–∞—á–µ False.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏–Ω–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    param = "-n" if platform.system().lower() == "windows" else "-c"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    command = ["ping", param, "1", ip_address]

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É, —Å–∫—Ä—ã–≤–∞—è –µ–µ –≤—ã–≤–æ–¥, –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞.
        # –ö–æ–¥ 0 –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.
        return (
            subprocess.run(
                command,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                check=False,
            ).returncode
            == 0
        )
    except FileNotFoundError:
        # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —É—Ç–∏–ª–∏—Ç–∞ 'ping' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH.
        print(
            f"–û–®–ò–ë–ö–ê: –ö–æ–º–∞–Ω–¥–∞ 'ping' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö–æ—Å—Ç {ip_address}."
        )
        return False


def check_member_version(
    name: str,
    client_version: str,
    latest_version: str,
    was_version_alert_sent: bool,
) -> tuple[str | None, bool]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    is_version_ok = client_version == latest_version
    report = None
    new_version_alert_sent = was_version_alert_sent

    if not is_version_ok and client_version != "N/A":
        if not was_version_alert_sent:
            report = f"üîß {name}: —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è ({client_version})"
            new_version_alert_sent = True
    elif was_version_alert_sent and is_version_ok:
        report = f"‚úÖ {name}: –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π ({client_version})"
        new_version_alert_sent = False

    return report, new_version_alert_sent


def check_member_online_status(
    name: str,
    last_online_ts: int | None,
    time_ms: int,
    previous_state: dict,
    ip_assignments: list[str],
) -> tuple[str | None, int, int, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç."""
    report = None
    previous_alert_level = previous_state.get("offline_alert_level", 0)
    previous_last_seen_seconds_ago = previous_state.get("last_seen_seconds_ago", -1)

    new_offline_alert_level = previous_alert_level
    seconds_ago = -1
    last_online_str = "N/A"

    if not last_online_ts:
        if not previous_state:
            report = f"‚ùì {name}: –Ω–∏ —Ä–∞–∑—É –Ω–µ –±—ã–ª –≤ —Å–µ—Ç–∏."
        return report, new_offline_alert_level, seconds_ago, last_online_str

    api_seconds_ago = get_seconds_since(last_online_ts, time_ms)
    seconds_ago = api_seconds_ago

    anomaly_jump_threshold = (
        previous_last_seen_seconds_ago
        + settings.CHECK_INTERVAL_SECONDS
        + settings.LAST_SEEN_ANOMALY_THRESHOLD_SECONDS
    )

    if (
        previous_last_seen_seconds_ago != -1
        and api_seconds_ago > anomaly_jump_threshold
    ):
        seconds_ago = previous_last_seen_seconds_ago + settings.CHECK_INTERVAL_SECONDS
        print(
            f"–ê–ù–ê–õ–ò–ó: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–Ω–æ–º–∞–ª—å–Ω—ã–π —Å–∫–∞—á–æ–∫ 'lastSeen' –¥–ª—è {name}. "
            f"API: {api_seconds_ago} —Å–µ–∫, –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {previous_last_seen_seconds_ago} —Å–µ–∫. "
            f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {seconds_ago} —Å–µ–∫."
        )
        last_online_str = f"~{seconds_ago} —Å–µ–∫. –Ω–∞–∑–∞–¥ (—Ä–∞—Å—á–µ—Ç–Ω–æ–µ)"
    else:
        last_online_str = f"{seconds_ago} —Å–µ–∫. –Ω–∞–∑–∞–¥"

    if seconds_ago <= settings.ONLINE_THRESHOLD_SECONDS:
        if previous_alert_level > 0:
            print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {name} —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏.")
            report = f"‚úÖ {name}: —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏."
            new_offline_alert_level = 0
    else:
        triggered_level_key = None
        sorted_thresholds = sorted(
            settings.OFFLINE_THRESHOLDS.items(),
            key=lambda item: item[1]["level"],
            reverse=True,
        )
        for key, data in sorted_thresholds:
            if seconds_ago > data["seconds"]:
                triggered_level_key = key
                break

        if triggered_level_key:
            new_alert_level = settings.OFFLINE_THRESHOLDS[triggered_level_key]["level"]
            if new_alert_level > previous_alert_level:
                report = settings.OFFLINE_THRESHOLDS[triggered_level_key][
                    "message"
                ].format(name=name)

                # --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–æ–º ---
                if ip_assignments:
                    ip_to_ping = ip_assignments[0]
                    print(
                        f"–ê–ù–ê–õ–ò–ó: –£–∑–µ–ª {name} –æ—Ñ–ª–∞–π–Ω. –ü—Ä–æ–≤–µ—Ä—è—é –ø–∏–Ω–≥ –¥–æ {ip_to_ping}..."
                    )
                    ping_ok = ping_host(ip_to_ping)
                    if ping_ok:
                        report += f"\n  (üí° –ü–∏–Ω–≥ –¥–æ {ip_to_ping} –ø—Ä–æ—Ö–æ–¥–∏—Ç. –í–æ–∑–º–æ–∂–µ–Ω —Å–±–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞.)"
                    else:
                        report += f"\n  (‚ùóÔ∏è –ü–∏–Ω–≥ –¥–æ {ip_to_ping} –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç. –£–∑–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.)"
                else:
                    print(f"–ê–ù–ê–õ–ò–ó: –£ —É–∑–ª–∞ {name} –Ω–µ—Ç IP-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞.")

                new_offline_alert_level = new_alert_level

    return report, new_offline_alert_level, seconds_ago, last_online_str


def process_member(member: dict, latest_version: str, time_ms: int) -> list[str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.
    """
    node_id = member["nodeId"]
    name = member.get("name", node_id)
    problem_reports = []

    db_row = db.get_member_state(node_id)
    previous_state = dict(db_row) if db_row else {}
    was_version_alert_sent = previous_state.get("version_alert_sent", False)
    new_problems_count = previous_state.get("problems_count", 0)

    client_version = member.get("clientVersion", "N/A").lstrip("v")
    version_report, new_version_alert_sent = check_member_version(
        name, client_version, latest_version, was_version_alert_sent
    )
    if version_report:
        problem_reports.append(version_report)
        new_problems_count += 1

    last_online_ts = member.get("lastSeen")
    # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–æ–º
    ip_assignments = member.get("config", {}).get("ipAssignments", [])

    online_report, new_offline_alert_level, seconds_ago, last_online_str = (
        check_member_online_status(
            name, last_online_ts, time_ms, previous_state, ip_assignments
        )
    )
    if online_report:
        problem_reports.append(online_report)
        if "—Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏" not in online_report:
            new_problems_count += 1

    version_status = "OK" if client_version == latest_version else "OLD"
    print(
        f"ID: {node_id}, –ò–º—è: {name}, –í–µ—Ä—Å–∏—è: {client_version or 'N/A'} [{version_status}], –û–Ω–ª–∞–π–Ω: {last_online_str}"
    )

    db.update_member_state(
        node_id,
        name,
        new_version_alert_sent,
        new_offline_alert_level,
        seconds_ago,
        new_problems_count,
    )

    return problem_reports
