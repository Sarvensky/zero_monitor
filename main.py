"""–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç—è—Ö ZeroTier."""

import time
from datetime import datetime, date
from send_to_chat import (
    report_findings,
    send_daily_report,
    send_startup_notification,
)
import settings
import api_client
import database_manager as db  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î


def now_datetime() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."""
    return datetime.now().strftime("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å: %Y-%m-%d %H:%M:%S")


def get_seconds_since(last_online, time_ms) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (time_ms)
    –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–Ω–ª–∞–π–Ω–∞ (last_online).
    –û–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.
    """
    diff_seconds = abs(time_ms - last_online) / 1000
    return int(diff_seconds)


def main(statistics: dict) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ZeroTier."""
    print(now_datetime())

    statistics["checks_today"] += 1
    time_ms = int(datetime.now().timestamp() * 1000)

    latest_version = api_client.get_latest_zerotier_version()
    print(f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è ZeroTier: {latest_version}")

    all_members = api_client.get_all_members(settings.ZEROTIER_NETWORKS)

    if not all_members:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —Å–µ—Ç–∏. –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ ---")

    problem_reports = []

    monitored_members = [m for m in all_members if m["nodeId"] in settings.MEMBER_IDS]

    for member in monitored_members:
        node_id = member["nodeId"]
        name = member.get("name", node_id)

        # 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î
        previous_state = db.get_member_state(node_id)
        was_version_alert_sent = (
            previous_state["version_alert_sent"] if previous_state else False
        )
        previous_alert_level = (
            previous_state["offline_alert_level"] if previous_state else 0
        )

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        new_version_alert_sent = was_version_alert_sent
        new_offline_alert_level = previous_alert_level

        # --- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ ---
        client_version = member.get("clientVersion", "N/A").lstrip("v")
        is_version_ok = client_version == latest_version
        version_status = "OK" if is_version_ok else "OLD"

        if not is_version_ok and client_version != "N/A":
            if not was_version_alert_sent:
                problem_reports.append(f"üîß {name}: —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è ({client_version})")
                new_version_alert_sent = True
        elif was_version_alert_sent:
            problem_reports.append(
                f"‚úÖ {name}: –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π ({client_version})."
            )
            new_version_alert_sent = False

        # --- 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞ ---
        last_online_ts = member.get("lastSeen")
        last_online_str = "N/A"

        if last_online_ts:
            seconds_ago = get_seconds_since(last_online_ts, time_ms)
            last_online_str = f"{seconds_ago} —Å–µ–∫. –Ω–∞–∑–∞–¥"

            if seconds_ago <= settings.ONLINE_THRESHOLD_SECONDS:
                if previous_alert_level > 0:
                    print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {name} ({node_id}) —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏.")
                    problem_reports.append(f"‚úÖ {name}: —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏.")
                    new_offline_alert_level = 0
            else:
                triggered_level_key = None
                sorted_thresholds = sorted(
                    settings.OFFLINE_THRESHOLDS.items(),
                    key=lambda item: item[1]["level"],
                    reverse=True,
                )
                for key, data in sorted_thresholds:
                    if seconds_ago > data["seconds"]:
                        triggered_level_key = key
                        break

                if triggered_level_key:
                    new_alert_level = settings.OFFLINE_THRESHOLDS[triggered_level_key][
                        "level"
                    ]
                    if new_alert_level > previous_alert_level:
                        message = settings.OFFLINE_THRESHOLDS[triggered_level_key][
                            "message"
                        ].format(name=name)
                        problem_reports.append(message)
                        new_offline_alert_level = new_alert_level
        else:
            last_online_str = "N/A"
            if (
                not previous_state
            ):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç –≤ –ë–î
                problem_reports.append(f"‚ùì {name}: –Ω–∏ —Ä–∞–∑—É –Ω–µ –±—ã–ª –≤ —Å–µ—Ç–∏.")

        print(
            f"ID: {node_id}, –ò–º—è: {name}, –í–µ—Ä—Å–∏—è: {client_version or 'N/A'} [{version_status}], –û–Ω–ª–∞–π–Ω: {last_online_str}"
        )

        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        db.update_member_state(
            node_id, name, new_version_alert_sent, new_offline_alert_level
        )

    if problem_reports:
        report_findings(problem_reports, statistics)
    else:
        print("\n–ù–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")


if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    db.initialize_database()

    send_startup_notification()

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î
    stats = db.get_stats()
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –≤ –æ–±—ä–µ–∫—Ç date –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        last_report_date = date.fromisoformat(stats["last_report_date"])
    except (ValueError, TypeError, KeyError):
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        last_report_date = date.today()
        stats = {
            "last_report_date": str(last_report_date),
            "checks_today": 0,
            "problems_today": 0,
        }

    while True:
        current_date = date.today()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å (–ø–æ–ª–Ω–æ—á—å)
        if current_date > last_report_date:
            print(
                f"\n--- –ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å ({current_date}). –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ {last_report_date}. ---"
            )
            send_daily_report(stats)

            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
            last_report_date = current_date
            stats["last_report_date"] = str(current_date)
            stats["checks_today"] = 0
            stats["problems_today"] = 0

        try:
            main(stats)
        except ValueError as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –ø–∞–¥–∞–ª
            print(f"\n--- –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e} ---")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        db.save_stats(stats)
        print(
            f"\n--- –ü–∞—É–∑–∞ {settings.CHECK_INTERVAL_SECONDS // 60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ---"
        )
        time.sleep(settings.CHECK_INTERVAL_SECONDS)
