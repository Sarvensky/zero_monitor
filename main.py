"""–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç—è—Ö ZeroTier."""

import time
from datetime import date, datetime
from send_to_chat import (
    report_findings,
    send_daily_report,
    send_startup_notification,
)
import settings
import api_client
import database_manager as db  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from utils import get_seconds_since, now_datetime


def _check_member_version(
    name: str,
    client_version: str,
    latest_version: str,
    was_version_alert_sent: bool,
) -> tuple[str | None, bool]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    is_version_ok = client_version == latest_version
    report = None
    new_version_alert_sent = was_version_alert_sent

    if not is_version_ok and client_version != "N/A":
        if not was_version_alert_sent:
            report = f"üîß {name}: —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è ({client_version})"
            new_version_alert_sent = True
    elif was_version_alert_sent and is_version_ok:
        report = f"‚úÖ {name}: –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π ({client_version})"
        new_version_alert_sent = False

    return report, new_version_alert_sent


def _check_member_online_status(
    name: str,
    last_online_ts: int | None,
    time_ms: int,
    previous_state: dict,
) -> tuple[str | None, int, int, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç."""
    report = None
    previous_alert_level = previous_state.get("offline_alert_level", 0)
    previous_last_seen_seconds_ago = previous_state.get("last_seen_seconds_ago", -1)

    new_offline_alert_level = previous_alert_level
    seconds_ago = -1
    last_online_str = "N/A"

    if not last_online_ts:
        # –ï—Å–ª–∏ —É–∑–µ–ª –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª –≤ —Å–µ—Ç–∏ –∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        if not previous_state:
            report = f"‚ùì {name}: –Ω–∏ —Ä–∞–∑—É –Ω–µ –±—ã–ª –≤ —Å–µ—Ç–∏."
        return report, new_offline_alert_level, seconds_ago, last_online_str

    api_seconds_ago = get_seconds_since(last_online_ts, time_ms)
    seconds_ago = api_seconds_ago

    anomaly_jump_threshold = (
        previous_last_seen_seconds_ago
        + settings.CHECK_INTERVAL_SECONDS
        + settings.LAST_SEEN_ANOMALY_THRESHOLD_SECONDS
    )

    if (
        previous_last_seen_seconds_ago != -1
        and api_seconds_ago > anomaly_jump_threshold
    ):
        seconds_ago = previous_last_seen_seconds_ago + settings.CHECK_INTERVAL_SECONDS
        print(
            f"–ê–ù–ê–õ–ò–ó: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–Ω–æ–º–∞–ª—å–Ω—ã–π —Å–∫–∞—á–æ–∫ 'lastSeen' –¥–ª—è {name}. "
            f"API: {api_seconds_ago} —Å–µ–∫, –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {previous_last_seen_seconds_ago} —Å–µ–∫. "
            f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {seconds_ago} —Å–µ–∫."
        )
        last_online_str = f"~{seconds_ago} —Å–µ–∫. –Ω–∞–∑–∞–¥ (—Ä–∞—Å—á–µ—Ç–Ω–æ–µ)"
    else:
        last_online_str = f"{seconds_ago} —Å–µ–∫. –Ω–∞–∑–∞–¥"

    if seconds_ago <= settings.ONLINE_THRESHOLD_SECONDS:
        if previous_alert_level > 0:
            print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {name} —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏.")
            report = f"‚úÖ {name}: —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏."
            new_offline_alert_level = 0
    else:
        triggered_level_key = None
        sorted_thresholds = sorted(
            settings.OFFLINE_THRESHOLDS.items(),
            key=lambda item: item[1]["level"],
            reverse=True,
        )
        for key, data in sorted_thresholds:
            if seconds_ago > data["seconds"]:
                triggered_level_key = key
                break

        if triggered_level_key:
            new_alert_level = settings.OFFLINE_THRESHOLDS[triggered_level_key]["level"]
            if new_alert_level > previous_alert_level:
                report = settings.OFFLINE_THRESHOLDS[triggered_level_key][
                    "message"
                ].format(name=name)
                new_offline_alert_level = new_alert_level

    return report, new_offline_alert_level, seconds_ago, last_online_str


def _process_member(member: dict, latest_version: str, time_ms: int) -> list[str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.
    """
    node_id = member["nodeId"]
    name = member.get("name", node_id)
    problem_reports = []

    # 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î (–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –Ω–µ—Ç)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sqlite3.Row –≤ dict, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å .get() –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    db_row = db.get_member_state(node_id)
    previous_state = dict(db_row) if db_row else {}
    was_version_alert_sent = previous_state.get("version_alert_sent", False)
    new_problems_count = previous_state.get("problems_count", 0)

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
    client_version = member.get("clientVersion", "N/A").lstrip("v")
    version_report, new_version_alert_sent = _check_member_version(
        name, client_version, latest_version, was_version_alert_sent
    )
    if version_report:
        problem_reports.append(version_report)
        new_problems_count += 1

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞
    last_online_ts = member.get("lastSeen")
    online_report, new_offline_alert_level, seconds_ago, last_online_str = (
        _check_member_online_status(name, last_online_ts, time_ms, previous_state)
    )
    if online_report:
        problem_reports.append(online_report)
        # –ù–µ —Å—á–∏—Ç–∞–µ–º "—Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏" –∑–∞ –Ω–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É
        if "—Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏" not in online_report:
            new_problems_count += 1

    # 4. –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    version_status = "OK" if client_version == latest_version else "OLD"
    print(
        f"ID: {node_id}, –ò–º—è: {name}, –í–µ—Ä—Å–∏—è: {client_version or 'N/A'} [{version_status}], –û–Ω–ª–∞–π–Ω: {last_online_str}"
    )

    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
    db.update_member_state(
        node_id,
        name,
        new_version_alert_sent,
        new_offline_alert_level,
        seconds_ago,
        new_problems_count,
    )

    return problem_reports


def run_check_cycle(statistics: dict) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ZeroTier."""
    check_time_str = now_datetime()
    print(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å: {check_time_str}")

    statistics["checks_today"] += 1
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    statistics["last_check_datetime"] = check_time_str
    time_ms = int(datetime.now().timestamp() * 1000)

    latest_version = api_client.get_latest_zerotier_version()
    print(f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è ZeroTier: {latest_version}")

    all_members = api_client.get_all_members(settings.ZEROTIER_NETWORKS)

    if not all_members:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —Å–µ—Ç–∏. –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ ---")

    all_problem_reports = []
    monitored_members = [m for m in all_members if m["nodeId"] in settings.MEMBER_IDS]

    for member in monitored_members:
        member_reports = _process_member(member, latest_version, time_ms)
        all_problem_reports.extend(member_reports)

    if all_problem_reports:
        report_findings(all_problem_reports, statistics)
    else:
        print("\n–ù–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")


def start_monitoring():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    db.initialize_database()

    send_startup_notification()

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î
    stats = db.get_stats()
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
    try:
        last_report_date_str = stats.get("last_report_date")
        if not last_report_date_str:
            # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ None/–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            raise ValueError("–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞.")
        last_report_date = date.fromisoformat(last_report_date_str)
    except (ValueError, TypeError):
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞,
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ –≤ —Å–ª–æ–≤–∞—Ä–µ, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—è –¥—Ä—É–≥–∏–µ —Å—á–µ—Ç—á–∏–∫–∏.
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –ë–î. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞.")
        last_report_date = date.today()
        stats["last_report_date"] = str(last_report_date)

    while True:
        current_date = date.today()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å (–ø–æ–ª–Ω–æ—á—å)
        if current_date > last_report_date:
            print(
                f"\n--- –ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å ({current_date}). –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ {last_report_date}. ---"
            )
            problematic_members = db.get_problematic_members()
            send_daily_report(stats, problematic_members)

            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
            last_report_date = current_date
            stats["last_report_date"] = str(current_date)
            stats["checks_today"] = 0
            stats["problems_today"] = 0
            db.reset_daily_problem_counts()

        try:
            run_check_cycle(stats)
        except ValueError as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –ø–∞–¥–∞–ª
            print(f"\n--- –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e} ---")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        db.save_stats(stats)
        print(
            f"\n--- –ü–∞—É–∑–∞ {settings.CHECK_INTERVAL_SECONDS // 60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ---"
        )
        time.sleep(settings.CHECK_INTERVAL_SECONDS)


if __name__ == "__main__":
    start_monitoring()
